.. _pos_0:

..
  filename: rst_sphinx.rst
  date: 20120625-0800
  author: chengl6500

=====================================================
reStructuredText及Shpinx工具的学习记录
=====================================================

*reStructuredText*
 (reStructuredText 是轻量级标记语言的一种，被设计为容易阅读和编写的纯文本，并且可以借助Docutils这样的程序进行文档处理，也可以转换为HTML或PDF等多种格式，或由Sphinx-Doc这样的程序转换为LaTex、man等更多格式。更多可参考 reStructuredText官方网址_)

.. _reStructuredText官方网址: http://docutils.sourceforge.net/rst.html

*Sphinx*
 (Python documentation generator)

与rst相关的几个博客:
 #. |http0|

 #. |http1|

.. |http0| replace:: `reStructuredText快速参考`_
.. _reStructuredText快速参考: http://wiki.venj.me/restructuredtext-quick-reference
.. |http1| replace:: `reStructuredText 简明教程`_
.. _reStructuredText 简明教程: http://blog.csdn.net/jiyucn/article/details/2157189


01) reStructuredText语法
=================================

    Sphinx 使用 reStructuredText 标记语法（和其他一些语法）来提供文档控制。

    官方网址 http://docutils.sourceforge.net/rst.html

01-01) rst基本语法：
-----------------------------

新建一个实例文件example.rst来了解一下Sphinx的语法：
::

  love@db6sda8:/tmp/Sphinx$ vim example.rst

   This is a Title


  That has a paragraph about a main subject and is set when the '='
  is at least the same length of the title itself.

  Subject Subtitle


  Subtitles are set with '-' and are required to have the same length
  of the subtitle itself, just like titles.

  Lists can be unnumbered like:

   * Item Foo
   * Item Bar

  Or automatically numbered:

   #. Item 1
   #. Item 2
   #. Item 3
   #. Item 4
   #. Item 5
   #. Item 6
   #. Item 7
   #. Item 8
   #. Item 9
   #. Item 10
   #. Item 11

  Inline Markup

  Words can have *emphasis in italics* or be **bold** and you can define
  code samples with back quotes, like when you talk about a command: ``sudo``
  gives you super user powers!

01-02) 标题
---------------------

* 标题与其对应的标题标识符号相对应，标识符号至少与标题的长度相同（可以大于标题的长度）
* 相同级别的标题使用统一(相同的）标识符号
* 可以使用的标识符号有 = - ^ ~ ' " _ : # > < 首先使用的被自动识别为1级标题，其后为2级，依次类推


# 这是原文
::

  文字下带双划线：是1级标题
  ============================

显示效果如下图

.. figure:: _static/title_1.png

# 这是原文
::

  文字下带单划线：是2级标题
  -------------------------

显示效果如下图

.. figure:: _static/title_2.png

# 这是原文
::

  文字下带^：是3级标题
  ^^^^^^^^^^^^^^^^^^^^^^^^^^

显示效果如下图

.. figure:: _static/title_3.png


01-03) 列表
---------------------

文字前加* 号：是无序号列表

# 这是原文
::

  * 无序号的列表
  * 无序号的列表

显示效果如下图

* 无序号的列表
* 无序号的列表

文字前加#. 号：是带序号的列表

# 这是原文
::

  #. 带序号的列表
  #. 带序号的列表

显示效果如下图

#. 带序号的列表
#. 带序号的列表

定义列表: \*列表*

#这是原文
::

 *名词1*
  解释意义
 *名词2*
  解释意义

显示效果如下

*名词1*
  对应的解释意义1
*名词2*
  对应的解释意义2

01-04) 行内标记
------------------------

\*强调*  ====>  (斜体字体) *强调*

\**特别强调**   ====>  (黑体字体) **特别强调**

\\*原文*  ===>   \*原文*

\`字符串`  ===> 字符串内包含空格或者标点符号号，将整个作为一个字符串

\``行内引用``

\简单链接_

\`词组 链接`_

无名链接___

\_`链接目标`

\|物件别名|


\``*原文引用*``


01-05) 块元素
------------------------

块元素：具有相同缩进的元素为块元素，例如段落、表格。块元素使用一个空行结束，也就是一个垂直分隔符。连续多个空行时，作为一个空行处理。
块元素也允许逐行增加缩进。

#原文如下::

 第1行
 第2行

  第3行

    第4行

(相同缩进的行处理为一行，不同缩进，无论缩进多少，都处理为一个缩进。)

上面文本显示效果如下图：

.. figure:: _static/block_1.png

段落的缩进由其首行缩进决定。这种形式属于“定义列表”。

段落间需要逐行向外缩进时（比如中文排版）：

#原文如下::

       段落首行
    第2行向外缩进
    其它行和第2行相同

显示效果如下：

    段落首行

  第2段向外缩进

  其它段的缩进同第2段

段落中逐行向外缩进时使用“行块元素”来解决。在每一行起始处添加引导符|和缩进

#原文如下::
  |    段落首行
  | 第2行向外缩进
  | 其它行和第2行相同

显示效果如下：

|    段落首行
| 第2行向外缩进
| 其它行和第2行相同


相邻的行块元素，它们的引导符缩进应相同。

01-06) 超级块元素
--------------------------

超级块元素：类似块元素，但是可以包含空行，并且内部可以随意缩进。例如注释、块引用。
包含有超级块引导符的行为引导行。超级块起始时相对引导行向对缩进，结束时使用一个空行，并且向外缩进等于或者超过引导行。
外部块
引导行<引导符>

   向内缩进

  超级块内部可以自由缩进

  可以使用空行

新的开始，这一行前需要空行，起码与引导行缩进相同，或者向更外缩进

01-07) 块引用
--------------------------

块引用，是以“:: “起始的超级块元素，之后跟一个空行。

块引用的内容不作任何处理，以原文显示。一般用于代码块的显示。

01-08) 注释
----------------------

注释：注释是以“.. ”起始的超级块元素，注释中的内容只在.rst源文件中显示，实际在显示效果中并不显示。

#注释原文如下::

  .. 注释
    第2行
    第3行

在实际显示结果（效果）中并不会显示上面的注释。

01-09) 物件元素
-------------------------

物件元素：用来定义一个物件，物件元素由行内字串元素或注释中的块元素构成。

以_结尾的字串元素，例如 链接_[脚注]

以|包裹的字串元素，例如 \|别名|

它们都需要在注释中进行解释：

原文显示如下:
::

  # 这是原文
  .. _链接:http://w.x.z
  .. ［脚注]xxxxxxxxx
  .. note::注意

一些具有特殊功能的物件，比如索引contents::，被直接写到注释中去:
::

  # 这是原文
  .. image::图片
  .. contents::索引

01-10) 自定义元素
---------------------------

自定义元素：



01-11) 添加图形：
---------------------------------

简明的段落、图像和图形都为项目文档增加趣味性和可读性。Sphinx 有助于利用这些有可能添加了静态文件的主要元素来吸引读者的注意。

添加静态文件的正确语法很容易记忆。只要将静态文件放置 _static 目录（Sphinx 在创建文档布局时创建了该目录）中（如_static/unix-pdp11.jpg），就可以轻松地对其进行引用。查看 reStructuredTex 文件中的引用：(在本例中，将其添加在 example.rst 的底部)::

  love@db6sda8:/tmp/Sphinx$ cat index.rst
  .. Sphinx-test1 documentation master file, created by
     Sphinx-quickstart on Thu Jun 21 22:45:10 2012.
     You can adapt this file completely to your liking, but it should at least
     contain the root `toctree` directive.

   Welcome to Sphinx-test1's documentation!

  Contents:

  .. toctree::
     :maxdepth: 2

     example

   Indices and tables

  * :ref:`genindex`
  * :ref:`modindex`
  * :ref:`search`

  .. image:: _static/unix-pdp11.jpg

然后重新``make html``自动生成HTML文件：

01-12) 表格
------------------

待补充....

01-13) reStructuredText && Sphinx && github(使用 reStructuredText 编写用户手册)
-------------------------------------------------------------------------------

http://blog.ftao.org/2011/05/28/write-user-manual-using-restructredtest-and-sphinx/
http://blog.csdn.net/jiyucn/article/details/2157189

前几天，将ezEngage 的帮助文档重新写了一遍。这么做的原因是原来的文档直接用HTML写的，并且和主站放在一起。
发布不方便，只是修改一点东西也要和主站一起发布。并且原始文件就是HTML，写起来很麻烦。

我用reStructuredText + Sphinx + github pages 重新编写，部署和发布了一份帮助文档。

reStructuredText 是一种轻量级的标记语言，特点是原始文件可读性很好。
Python 以及很多Python著名的开源项目（比如Django) 都使用该格式的来编写文档和手册。　
Sphinx 的一个将reStructuredText 文件转换成各种格式（比如HTML,LeTex,PDF 等)的工具。　
GitHub Pages 是一个GitHub 提供的托管静态页面的服务，只要内容通过git 推送到github 上面，就很可以方便发布内容了。　

步骤如下:
#. 在github 上面建立一个仓库，开通github pages 功能
#. 将master 和 gh-pages 两个分支checkout 到本地的两个目录 (比如说 example-master , example-gh-pages)
#. 在master branch 里面正常写 reStructuredText ,
#. 符号链接 example-master/_build/html 　到 example-gh-pages
#. make html , 生成html
#. push gh-pages 分支到 github , 发布完成。

这个方案的好处:
#. 源文件可读性好
#. 有版本管理
#. github pages 发布很方便
#. 服务器都省了….

链接:
#. 这份文档对应的仓库: https://github.com/ezengage/ezengage-site/
#. GitHub Pages http://pages.github.com/
#. Sphinx http://sphinx.pocoo.org

ps: reStructuredText 和 RESTful 这两个拼写上都和 rest 相近， Sphinx （文档生成工具, http://sphinx.pocoo.org) 以及 Sphinx (全文搜索引擎, http://sphinxsearch.com/) 都叫Sphinx 。搜索的时候很容易混淆。

02) Sphinx：
===================

Sphinx is a tool that makes it easy to create intelligent and beautiful documentation.

简单来讲，就是一个基于ReStructuredText的文档生成工具。方便易用，功能强大。

而关于reStructuredText，确切的来讲是一种文档语法，类似的文档语法网上很多，像markdown、docbook等，众人熟知的应该是markdown，网上很多人基于此文档语法书写文档、博客等，它的语法相对来讲比较简单，通俗易用。markdown与reStructuredText二者算的上旗鼓相当，rst在python社区貌似用的比较多，毕竟基于rst的Sphinx是用python开发的，Python的官方文档既是采用sphinx生成的文档系统，还有最近看到的42区官方文档。

Sphinx 是一种工具，它允许开发人员以纯文本格式编写文档，以便采用满足不同需求的格式轻松生成输出。这在使用 Version Control System 追踪变更时非常有用。纯文本文档对不同系统之间的协作者也非常有用。纯文本是当前可以采用的最便捷的格式之一。

虽然 Sphinx 是用 Python 编写的，并且最初是为 Python 语言文档而创建，但它并不一定是以语言为中心，在某些情况下，甚至不是以程序员为中心。Sphinx 有许多用处，比如可以用它来编写整本书！

可以将 Sphinx 想像成为一种文档框架：它会抽象化比较单调的部分，并提供自动函数来解决一些常见问题，比如突出显示标题索引和特殊代码（在显示代码示例时），以及突出显示适当的语法。

学习参考 `使用 sphinx 制作简洁而又美观的文档`_

.. _使用 sphinx 制作简洁而又美观的文档: http://www.ibm.com/developerworks/cn/opensource/os-sphinx-documentation/

02-01) Sphinx安装和配置
---------------------------

::

  pip install Sphinx

或者
::

  easy_setup install Sphinx

框架使用了一个目录结构来分离源文件（纯文本文件）和构建（指生成的输出）。例如，如果使用 Sphinx 从文档源中生成一个 PDF，那么该文件会放置在构建目录中。您可以更改此行为，但为了获得一致性，我们还是保留了默认格式。

快速启动一个新的文档项目sphinx-quickstart
::

  love@db6sda8:/tmp$ mkdir Sphinx && cd Sphinx
  love@db6sda8:/tmp/Sphinx$ sphinx-quickstart
  ###系统会通过一些问题提示您如何操作。请按下 Enter 键接受所有的默认值)
  Welcome to the Sphinx 1.1.2 quickstart utility.

  Please enter values for the following settings (just press Enter to
  accept a default value, if one is given in brackets).

  Enter the root path for documentation.
  > Root path for the documentation [.]:

  You have two options for placing the build directory for Sphinx output.
  Either, you use a directory "_build" within the root path, or you separate
  "source" and "build" directories within the root path.
  > Separate source and build directories (y/N) [n]:

  Inside the root directory, two more directories will be created; "_templates"
  for custom HTML templates and "_static" for custom stylesheets and other static
  files. You can enter another prefix (such as ".") to replace the underscore.
  > Name prefix for templates and static dir [_]:

  The project name will occur in several places in the built documentation.
  > Project name: Sphinx-test1
  > Author name(s): chengl6500

  Sphinx has the notion of a "version" and a "release" for the
  software. Each version can have multiple releases. For example, for
  Python the version is something like 2.5 or 3.0, while the release is
  something like 2.5.1 or 3.0a1.  If you don't need this dual structure,
  just set both to the same value.
  > Project version: 1.0
  > Project release [1.0]:

  The file name suffix for source files. Commonly, this is either ".txt"
  or ".rst".  Only files with this suffix are considered documents.
  > Source file suffix [.rst]:

  One document is special in that it is considered the top node of the
  "contents tree", that is, it is the root of the hierarchical structure
  of the documents. Normally, this is "index", but if your "index"
  document is a custom template, you can also set this to another filename.
  > Name of your master document (without suffix) [index]:

  Sphinx can also add configuration for epub output:
  > Do you want to use the epub builder (y/N) [n]:

  Please indicate if you want to use one of the following Sphinx extensions:
  > autodoc: automatically insert docstrings from modules (y/N) [n]:
  > doctest: automatically test code snippets in doctest blocks (y/N) [n]:
  > interSphinx: link between Sphinx documentation of different projects (y/N) [n]:
  > todo: write "todo" entries that can be shown or hidden on build (y/N) [n]:
  > coverage: checks for documentation coverage (y/N) [n]:
  > pngmath: include math, rendered as PNG images (y/N) [n]:
  > mathjax: include math, rendered in the browser by MathJax (y/N) [n]:
  > ifconfig: conditional inclusion of content based on config values (y/N) [n]:
  > viewcode: include links to the source code of documented Python objects (y/N) [n]:

  A Makefile and a Windows command file can be generated for you so that you
  only have to run e.g. `make html' instead of invoking Sphinx-build
  directly.
  > Create Makefile? (Y/n) [y]:
  > Create Windows command file? (Y/n) [y]:

  Creating file ./conf.py.
  Creating file ./index.rst.
  Creating file ./Makefile.
  Creating file ./make.bat.

  Finished: An initial directory structure has been created.

  You should now populate your master file ./index.rst and create other documentation
  source files. Use the Makefile to build the docs, like so:
     make builder
  where "builder" is one of the supported builders, e.g. html, latex or linkcheck.

  love@db6sda8:/tmp/Sphinx$

02-02) 自动在当前目录中生成下列文件和目录
----------------------------------------------

love@db6sda8:/tmp/Sphinx$ tree
::

  .
  |-- _build/
  |-- conf.py
  |-- index.rst
  |-- make.bat
  |-- Makefile
  |-- _static/
  `-- _templates/

了解一下每个文件：

    #. Makefile：编译过代码的开发人员应该非常熟悉这个文件，如果不熟悉，那么可以将它看作是一个包含指令的文件，在使用 make 命令时，可以使用这些指令来构建文档输出。
    #. make.bat：这是用于windows系统下的自动生成批处理文件。
    #. _build/：这是触发特定输出后用来存放所生成的文件的目录。
    #. _static/：所有不属于源代码（如图像）一部分的文件均存放于此处，稍后会在构建目录中将它们链接在一起。
    #. _templates/：
    #. conf.py：这是一个 Python 文件，用于存放 Sphinx 的配置值，包括在终端执行 Sphinx-quickstart 时选中的那些值。
    #. index.rst：文档项目的 root 目录。如果将文档划分为其他文件，该目录会连接这些文件。

其中index.rst文件内容如下
::

  love@db6sda8:/tmp/Sphinx$ cat index.rst
  .. Sphinx-test1 documentation master file, created by
  .. Sphinx-quickstart on Thu Jun 21 22:45:10 2012.
  .. You can adapt this file completely to your liking, but it should at least
  .. contain the root `toctree` directive.

  Welcome to Sphinx-test1's documentation!

  Contents:

  .. toctree::
     :maxdepth: 2

     example

  Indices and tables

  * :ref:`genindex`
  * :ref:`modindex`
  * :ref:`search`

在 index.rst 文件中的主标题之后，有一个内容清单，其中包括 toctree 声明。toctree 是将所有文档汇集到文档中的中心元素。如果有其他文件存在，但没有将它们列在此指令下，那么在构建的时候，这些文件不会随文档一起生成。

我们想将一个文件添加到文档中，例如实例文件 example.rst。需要将它列在 toctree 中，但要谨慎操作。文件名后面需要有一个间隔，这样文件名清单才会有效，该文件不需要文件扩展名（在本例中为 .rst）。在文件名距离左边距有三个空格的距离，maxdepth 选项后面有一个空白行。

此时，不用担心其他选项。目前，注意到了有一个列出其他单独的文件的索引文件，该文件可存储有效文档，因此，该列表有一定的顺序和空格，才能使该列表变得有效。

运行 make html 命令，将 HTML 指定为输出格式。可直接将该输出用作网站，因为它包含了生成的所有内容，包括 JavaScript 和 CSS 文件。
通过 make -h 命令，可以查看到更多选项。

随着我们完成第一步操作，从两个文件( index.rst example.rst )中生成 HTML 之后，我们就拥有一个完整的函数式（静态）网站。

在 _build 目录内，现在应该有两个目录：doctrees 和 html。我们对于这个存储了文档网站所需的全部文件的 HTML 目录很感兴趣。使用浏览器打开 index.html 文件可以看到整个内容。
我们可以通过一个基本布局来设置包含有关项目文档、搜索部分、内容表、附带名称和日期的版权声明、页码的一些信息。

搜索部分非常有趣，因为 Sphinx 已经为所有文件建立索引，并使用 JavaScript 的一些强大功能创建了一个可搜索的静态网站。

在前面的例子中，主标题显示为内容索引中的主要项目符号，副标题显示为二级项目符号。Sphinx 小心维护着让整个结构保持正确。

所有的链接都指向文档中的正确位置，并且标题和副标题均有定位点，允许直接进行链接。比如，Subject Subtitle 部分在浏览器中有一个类似 ../example.html#subject-subtitle 的定位点。如前所述，该工具消除了我们对这些琐碎的、重复的需求的顾虑。

02-03) 更多功能
-------------------------

Sphinx 能够用不同的格式导出文档，但要求安装额外的库和软件。可生成的格式包括：PDF、epub、man (UNIX Manual Pages) 和 LaTeX。

对于复杂的图形，有一个插件可将 Graphviz 图形添加至您的文档项目。我曾经不得不为一个小型办公网络地图创建一个插件，但它表现相当出色，无需使用其他工具，便可在同一文档中获取所有的东西。与 Graphviz 插件类似，有大量可用于 Sphinx 的插件（亦称为扩展）。Sphinx 提供了一些插件，比如 interSphinx，该插件允许您链接不同的 Sphinx 项目。

如果生成的输出的外观不符合您的喜好，Sphinx 还提供了许多主题，可应用它们来完全改变 HTML 文件呈现文档的方式。一些重要的开源项目，如 Celery 和 Lettuce，通过更改 CSS 并扩展模板完全更改了 HTML 的外观。

Sphinx 改变了我对编写文档的看法。从一开始的毫无灵感，到现在能够轻易编制我的几乎所有的个人开源项目以及少数内部项目，我感到非常兴奋。使用 Sphinx 可轻松检索遗忘在您自己文档中的信息。

03) ReText是基于python-qt4开发的rst文档编辑器，有实时预览功能
===============================================================


04) 其它工具rst2html5
=============================

$ sudo pip install rst2html5

$ rst2html5 --help

:ref:`点击返回页首<pos_0>`
